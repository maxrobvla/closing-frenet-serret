#include "io_utils.hpp"
#include "optimization.hpp"
#include "system_class.hpp"
#include <pybind11/numpy.h>
#include <pybind11/pybind11.h>

namespace py = pybind11;

int curvature_harmonic_part_check_zeros(
    int number_field_periods, py::array_t<double> curvature_coefficients) {

    std::vector<double> curvature_coefficients_vector,
        torsion_coefficients_vector;

    for (int i = 0; i < curvature_coefficients.size(); i++) {
        curvature_coefficients_vector.push_back(curvature_coefficients.at(i));
    }

    return check_harmonic_series_for_zeros(number_field_periods,
                                           curvature_coefficients_vector);
}

curve_system
create_system_from_python(int number_field_periods,
                          py::array_t<int> order_zeros,
                          py::array_t<double> curvature_coefficients,
                          py::array_t<double> torsion_coefficients) {
    std::vector<double> curvature_coefficients_vector,
        torsion_coefficients_vector;

    for (int i = 0; i < curvature_coefficients.size(); i++) {
        curvature_coefficients_vector.push_back(curvature_coefficients.at(i));
    }

    for (int i = 0; i < torsion_coefficients.size(); i++) {
        torsion_coefficients_vector.push_back(torsion_coefficients.at(i));
    }

    curve_system sys(number_field_periods, curvature_coefficients_vector,
                     torsion_coefficients_vector, order_zeros.at(0),
                     order_zeros.at(1));
    return sys;
}

double python_loss(int number_field_periods, py::array_t<int> order_zeros,
                   py::array_t<double> curvature_coefficients,
                   py::array_t<double> torsion_coefficients) {
    curve_system sys =
        create_system_from_python(number_field_periods, order_zeros,
                                  curvature_coefficients, torsion_coefficients);

    return curve_closing_loss(sys);
}

void save_curve(std::string filename, int number_field_periods,
                py::array_t<int> order_zeros,
                py::array_t<double> curvature_coefficients,
                py::array_t<double> torsion_coefficients) {
    curve_system sys =
        create_system_from_python(number_field_periods, order_zeros,
                                  curvature_coefficients, torsion_coefficients);

    write_solution_to_file(filename, sys);
}

PYBIND11_MODULE(closing_frenet_serret, m) {
    m.def("loss", python_loss,
          "Returns curve closing loss for curvature and torsion specified by "
          "given parameters",
          py::arg("number_field_periods"), py::arg("order_zeros"),
          py::arg("curvature_coefficients"), py::arg("torsion_coefficients"));
    m.def("save_curve", save_curve,
          "Saves curve generated by curvature and torsion specified by given "
          "parameters to a file with name 'data/{filename}.dat'",
          py::arg("filename"), py::arg("number_field_periods"),
          py::arg("order_zeros"), py::arg("curvature_coefficients"),
          py::arg("torsion_coefficients"));
    m.def("curvature_harmonic_part_check_zeros",
          curvature_harmonic_part_check_zeros, py::arg("number_field_periods"),
          py::arg("curvature_coefficients"));
}
